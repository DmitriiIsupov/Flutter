{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"index.html","text":"Welcome to ESP IoT Starter Kit Documentation For updated documentation please visit the Documentation Site . General Information ESP IoT Starter Kit Version: 1.0.x Documentation Version: 1.0 Created: 25/11/2020 Created by: Orison Technologies Need Advice? Send message through Contact Form Need Help? Open support ticket in our Github Repo Thank you for purchasing our project. If you have any questions that are beyond the scope of this documentation, please feel free to open support ticket in our support forum . Thank you! Project Overview Flutter ESP8266 IoT Starter Kit is a starter project for freelancers, indie developers, and hobbyists. This project includes source code for a simple Flutter application which can target Android, iOS as well as other platforms which are supported by Flutter, and a robust C++ based firmware for Arduino/ESP8266 devices. The firmware can be adopted on many Arduino boards as well as ESP32 with minor Pin-level changes. The aim of this project is to enable the developers to quickly launch their IoT project with custom branded apps for themselves or their customers. The codebase for the app and firmware can be used as a starting point (A starter Template) for your own project, as you can add more functionality to the main app and the device without having to worry about core features like App Settings, Multilingual Support, light and dark themes, and MQTT Communication. Same is true for the ESP firmware, the firmware is a time-tested codebase, which we have used in our own commercial-grade projects for years, and this can be used as a base project for adding functionality without tangling yourself in features like Easy Wi-Fi Onboarding, Device Settings, Retry-to-Connect logic as well as MQTT Communications. The app and the firmware by default use a public MQTT broker (as a demo) without any authentication to send commands to the device and receive command responses and data. The MQTT broker settings and credentials can easily be updated in the app as well as the ESP device without having to compile the app or the firmware. Mobile App Features Designed in Flutter, one of the best cross-platform mobile development framework backed by Google and a great open-source community Flutter app can be natively complied to target all major platforms including: Android, iOS, Windows Linux, MacOS and Raspberry Pi Clean code which can be easily customized and branded for your own projects Dark and Light mode support Streamlined multilingual implementation and selection through Settings page Settings screen with save and load implementation App can used as a Flutter Project Starter Template (Settings, Splash, Dark Theme, Multilingual etc.) The Screens Included with apps are: Splash Screen Main Screen with Data Graphs, Event Log, and Drawer Menu About Screen with all necessary sub screens (Readme, License, Privacy Policy, Contact) Settings Screen with additional dialog for MQTT Settings Help Screen driven by Markdown based content to easily ship app documentation ESP Firmware Features Commercial grade and time-tested firmware, ready to deploy for your personal and private projects Wi-Fi and MQTT Broker Configuration Pages through AP Mode and Captive Portal MQTT Protocol for 2-way communications for Remote Control and Telemetry Dedicated LED Light with blinking behavior to let you know the device state (Booting/Connecting, Looking for MQTT, Ready State) Highly resilient firmware with persisting configuration and auto-retry logic Clean Code with comments and documentation for customization and modifications for your own projects Extended Licence Guideline As per Envato rules, you must purchase this app under and EXTENDED LICENCE in either one of the following case: You plan to publish your own version of this template as a PAID app on the App store or Google Store You Plan to add In-App purchase to your own version of this app - which means your user will still get charged of money even if your app is available for free on the App/Play Store. You plan to sell the LIVE version of you app Envato, or similar market-places. Please Note that you are not allowed to resell the original source code you bought here on Envato. what mentioned above is only the LIVE app on the App/Play Store. Project Layout .ZIP File Name: ESP-IoT-Starter-Kit-v1.0.1 iot_starter_kit_app/ # This folder contains the code for Flutter App. ESP-IoT-Starter-Kit-Firmware/ # This folder contains the code for ESP Firmware. ESP-IoT-Starter-Kit-Documentation/ # This documentation folder index.html # The documentation homepage. ... # Other HTML pages, images and other files.","title":"Welcome"},{"location":"index.html#welcome-to-esp-iot-starter-kit-documentation","text":"For updated documentation please visit the Documentation Site .","title":"Welcome to ESP IoT Starter Kit Documentation"},{"location":"index.html#general-information","text":"ESP IoT Starter Kit Version: 1.0.x Documentation Version: 1.0 Created: 25/11/2020 Created by: Orison Technologies Need Advice? Send message through Contact Form Need Help? Open support ticket in our Github Repo Thank you for purchasing our project. If you have any questions that are beyond the scope of this documentation, please feel free to open support ticket in our support forum . Thank you!","title":"General Information"},{"location":"index.html#project-overview","text":"Flutter ESP8266 IoT Starter Kit is a starter project for freelancers, indie developers, and hobbyists. This project includes source code for a simple Flutter application which can target Android, iOS as well as other platforms which are supported by Flutter, and a robust C++ based firmware for Arduino/ESP8266 devices. The firmware can be adopted on many Arduino boards as well as ESP32 with minor Pin-level changes. The aim of this project is to enable the developers to quickly launch their IoT project with custom branded apps for themselves or their customers. The codebase for the app and firmware can be used as a starting point (A starter Template) for your own project, as you can add more functionality to the main app and the device without having to worry about core features like App Settings, Multilingual Support, light and dark themes, and MQTT Communication. Same is true for the ESP firmware, the firmware is a time-tested codebase, which we have used in our own commercial-grade projects for years, and this can be used as a base project for adding functionality without tangling yourself in features like Easy Wi-Fi Onboarding, Device Settings, Retry-to-Connect logic as well as MQTT Communications. The app and the firmware by default use a public MQTT broker (as a demo) without any authentication to send commands to the device and receive command responses and data. The MQTT broker settings and credentials can easily be updated in the app as well as the ESP device without having to compile the app or the firmware.","title":"Project Overview"},{"location":"index.html#mobile-app-features","text":"Designed in Flutter, one of the best cross-platform mobile development framework backed by Google and a great open-source community Flutter app can be natively complied to target all major platforms including: Android, iOS, Windows Linux, MacOS and Raspberry Pi Clean code which can be easily customized and branded for your own projects Dark and Light mode support Streamlined multilingual implementation and selection through Settings page Settings screen with save and load implementation App can used as a Flutter Project Starter Template (Settings, Splash, Dark Theme, Multilingual etc.) The Screens Included with apps are: Splash Screen Main Screen with Data Graphs, Event Log, and Drawer Menu About Screen with all necessary sub screens (Readme, License, Privacy Policy, Contact) Settings Screen with additional dialog for MQTT Settings Help Screen driven by Markdown based content to easily ship app documentation","title":"Mobile App Features"},{"location":"index.html#esp-firmware-features","text":"Commercial grade and time-tested firmware, ready to deploy for your personal and private projects Wi-Fi and MQTT Broker Configuration Pages through AP Mode and Captive Portal MQTT Protocol for 2-way communications for Remote Control and Telemetry Dedicated LED Light with blinking behavior to let you know the device state (Booting/Connecting, Looking for MQTT, Ready State) Highly resilient firmware with persisting configuration and auto-retry logic Clean Code with comments and documentation for customization and modifications for your own projects","title":"ESP Firmware Features"},{"location":"index.html#extended-licence-guideline","text":"As per Envato rules, you must purchase this app under and EXTENDED LICENCE in either one of the following case: You plan to publish your own version of this template as a PAID app on the App store or Google Store You Plan to add In-App purchase to your own version of this app - which means your user will still get charged of money even if your app is available for free on the App/Play Store. You plan to sell the LIVE version of you app Envato, or similar market-places. Please Note that you are not allowed to resell the original source code you bought here on Envato. what mentioned above is only the LIVE app on the App/Play Store.","title":"Extended Licence Guideline"},{"location":"index.html#project-layout","text":".ZIP File Name: ESP-IoT-Starter-Kit-v1.0.1 iot_starter_kit_app/ # This folder contains the code for Flutter App. ESP-IoT-Starter-Kit-Firmware/ # This folder contains the code for ESP Firmware. ESP-IoT-Starter-Kit-Documentation/ # This documentation folder index.html # The documentation homepage. ... # Other HTML pages, images and other files.","title":"Project Layout"},{"location":"esp-firmware.html","text":"ESP Firmware This firmware is an ESP8266 based IoT device which provides a simple yet robust foundation for a commercial-grade IoT device for remote control and telemetry over MQTT protocol. This section will guide you through setting up the development environment and modifying key sections of code to customize it for your own projects. The device currently controls two IOs while providing a dedicated LED light with blink behaviors to show different states of the device, and a port for a beeper to provide audible feedback. Setting up the Firmware on ESP8266 The firmware is setup and developed using open-source Visual Studio Code with PlatformIO extension for ease of environment setup and deployment. Download and install VS Code from following link: https://code.visualstudio.com/Download Install PlatformIO extension in VS Code from following link: https://marketplace.visualstudio.com/items?itemName=platformio.platformio-ide Once you have the dev environment ready, you can now open the firmware project. The .ZIP package contains a folder named iot_starter_kit_firmware which hosts the source code for the firmware. Extract this folder and then right-click to open this folder with VS Code. You can build the firmware right away by using the Ctrl + Alt + B shortcut once you open the project folder in VS code, or you deploy the firmware to NodeMCU compatible board by using the shortcut Ctrl + Alt + U and it will compile and upload the firmware to connected board via USB. First build will take a bit longer as the PlatformIO framework will download related SDKs and referenced libraries before compiling. This is a one time process. If everything goes well, and all the dev tools are properly installed, the firmware will be uploaded to connected ESP8266 based NodeMCU board. You will need to wire the ESP8266 board with components as per following diagram: Understanding the Firmware The Firmware code follows simple code practice with comments at complex logic or where necessary. It can be used as it is, modified as per requirement or parts of its routines can be used in other projects. MQTT Protocol for the Device This section describes MQTT protocol implemented and how you can modified it as per your requirement. To setup private MQTT broker, you can download and install from link: https://mosquitto.org/download/ Base Topic devices/esp01 The base topic can be modified in the source code for the macro _MQTT_BASE . Topic for Ping Topic for command devices/esp01/set/ping The device will subscribe to this topic on the given MQTT broker to listen for ping command in payload, and will publish response on the following topic: Topic for response devices/esp01/get/ping Any client which wants to get the response to the ping command will subscribe to this topic. The device will send a reply as pong for ping command. Topics for Ports These MQTT topics are assigned to IO Ports and sending commands to these topics will change the status of the port. devices/esp01/set/port1 devices/esp01/set/port2 Listens to command open and send back open to the following topics: devices/esp01/get/port1 devices/esp01/get/port2 Port 1 Function: Auto Close The defined port1 uses only the open command from MQTT or from the input button and resets the associated pin for a small amount to time, as defined in the _DELAY_BUTTON macro and then automatically reverts to original state. Port 2 Function: Toggle State The port2 is shown as the simple toggle function, which takes a command from MQTT or from the input button, and toggles its state as per the command open or close . The get/port2 topic also uses the Retain functionality of MQTT to retain the last state of the port. Topic for Sensor Data The device listens to command data on the following topic to publish sensor data from DHT sensor for Temperature and Humidity with system timestamp: devices/esp01/set/sensor_data The sensor data is sent back on the following topic: devices/esp01/get/sensor_data The data is sent as a JSON object, here is an example: { \"Temp\": \"23.10\", \"TempUnit\": \"C\", \"Hum\": \"15.20\", \"Time\": \"04-Nov-2020 23:52:57\" } Addtionally, the device also sends the above data every 5 minutes on the get/sensor_data topic which is a good example of receiving telemetry data periodically from the devices and using it for decision-making and presenting on IoT dashboards. Topic for Beeper devices/esp01/set/beeper Sounds the beeper on the device when beep command is sent and replies on following topic with beep : devices/esp01/get/beeper Topic for Uptime devices/esp01/uptime The device sends uptime on this topic every five minutes on this topic. Note that this topic uses Retain feature of MQTT protocol which retains the last message on the broker. This retained message is then delivered to any new client as it is connected to the broker and subscribes to this topic. Topic for Log devices/esp01/log The device sends all events log to this topic. Device Functions WiFi and MQTT Configurations in AP Mode and Captive Portal The device supports persistent configuration for WiFi Access, MQTT Broker and its credentials. There are two ways to enter in the AP Mode to set these configuration: Keep the Button1 pressed at power on or reset and the device will enter the AP mode. Long-press Button1 for 8 seconds and the device will reboot and enter the AP mode on the next boot. Once on AP mode and you can find the device on your mobile WiFi discovery. The device implements the WiFi Captive Portal (Automatically redirects to the settings webpage), so as soon as you connect your PC or Smartphone to this device's WiFi Access Point, you will automatically be redirected to the WiFi and MQTT Settings page. On this page you can choose the AP with internet access which the device will use to connect to the internet, and also save your MQTT Broker, Port, Login and Password. Once you choose an AP and save your settings, the device will reboot and will use the new settings to connect to the internet and provided MQTT Broker. Status LED Blink Behavior The Status LED shows the device state by behaving differently in different states. The following describes the details: LED Blink Behavior Device State Constant short Blinks In boot sequence Constant very short Blinks Looking for MQTT broker Three Blinks: 100ms On and 80ms Off Ping response Constant long Blinks / Heartbeat In normal state, connected to Internet Log on Serial Port and MQTT The device sends log messages to serial port of all system and data activity, and send some of data activity to MQTT log topic defined above. Log on serial port is a great way to troubleshoot and diagnose any problems. Public MQTT Broker for Testing You can use any public MQTT Broker such as broker.hivemq.com at standard port 1883 for testing purposes in device settings and Desktop and Mobile MQTT client. More details can be found at https://www.hivemq.com/public-mqtt-broker/ . You can just use their web based MQTT client at http://www.hivemq.com/demos/websocket-client/ and subscribe to the MQTT topic devices/esp01/# to listen to all communications from this device. Make sure to use Websocket port 8000 when connecting to public MQTT broker using the web based client.","title":"ESP Firmware"},{"location":"esp-firmware.html#esp-firmware","text":"This firmware is an ESP8266 based IoT device which provides a simple yet robust foundation for a commercial-grade IoT device for remote control and telemetry over MQTT protocol. This section will guide you through setting up the development environment and modifying key sections of code to customize it for your own projects. The device currently controls two IOs while providing a dedicated LED light with blink behaviors to show different states of the device, and a port for a beeper to provide audible feedback.","title":"ESP Firmware"},{"location":"esp-firmware.html#setting-up-the-firmware-on-esp8266","text":"The firmware is setup and developed using open-source Visual Studio Code with PlatformIO extension for ease of environment setup and deployment. Download and install VS Code from following link: https://code.visualstudio.com/Download Install PlatformIO extension in VS Code from following link: https://marketplace.visualstudio.com/items?itemName=platformio.platformio-ide Once you have the dev environment ready, you can now open the firmware project. The .ZIP package contains a folder named iot_starter_kit_firmware which hosts the source code for the firmware. Extract this folder and then right-click to open this folder with VS Code. You can build the firmware right away by using the Ctrl + Alt + B shortcut once you open the project folder in VS code, or you deploy the firmware to NodeMCU compatible board by using the shortcut Ctrl + Alt + U and it will compile and upload the firmware to connected board via USB. First build will take a bit longer as the PlatformIO framework will download related SDKs and referenced libraries before compiling. This is a one time process. If everything goes well, and all the dev tools are properly installed, the firmware will be uploaded to connected ESP8266 based NodeMCU board. You will need to wire the ESP8266 board with components as per following diagram:","title":"Setting up the Firmware on ESP8266"},{"location":"esp-firmware.html#understanding-the-firmware","text":"The Firmware code follows simple code practice with comments at complex logic or where necessary. It can be used as it is, modified as per requirement or parts of its routines can be used in other projects.","title":"Understanding the Firmware"},{"location":"esp-firmware.html#mqtt-protocol-for-the-device","text":"This section describes MQTT protocol implemented and how you can modified it as per your requirement. To setup private MQTT broker, you can download and install from link: https://mosquitto.org/download/","title":"MQTT Protocol for the Device"},{"location":"esp-firmware.html#base-topic","text":"devices/esp01 The base topic can be modified in the source code for the macro _MQTT_BASE .","title":"Base Topic"},{"location":"esp-firmware.html#topic-for-ping","text":"","title":"Topic for Ping"},{"location":"esp-firmware.html#topic-for-command","text":"devices/esp01/set/ping The device will subscribe to this topic on the given MQTT broker to listen for ping command in payload, and will publish response on the following topic:","title":"Topic for command"},{"location":"esp-firmware.html#topic-for-response","text":"devices/esp01/get/ping Any client which wants to get the response to the ping command will subscribe to this topic. The device will send a reply as pong for ping command.","title":"Topic for response"},{"location":"esp-firmware.html#topics-for-ports","text":"These MQTT topics are assigned to IO Ports and sending commands to these topics will change the status of the port. devices/esp01/set/port1 devices/esp01/set/port2 Listens to command open and send back open to the following topics: devices/esp01/get/port1 devices/esp01/get/port2","title":"Topics for Ports"},{"location":"esp-firmware.html#port-1-function-auto-close","text":"The defined port1 uses only the open command from MQTT or from the input button and resets the associated pin for a small amount to time, as defined in the _DELAY_BUTTON macro and then automatically reverts to original state.","title":"Port 1 Function: Auto Close"},{"location":"esp-firmware.html#port-2-function-toggle-state","text":"The port2 is shown as the simple toggle function, which takes a command from MQTT or from the input button, and toggles its state as per the command open or close . The get/port2 topic also uses the Retain functionality of MQTT to retain the last state of the port.","title":"Port 2 Function: Toggle State"},{"location":"esp-firmware.html#topic-for-sensor-data","text":"The device listens to command data on the following topic to publish sensor data from DHT sensor for Temperature and Humidity with system timestamp: devices/esp01/set/sensor_data The sensor data is sent back on the following topic: devices/esp01/get/sensor_data The data is sent as a JSON object, here is an example: { \"Temp\": \"23.10\", \"TempUnit\": \"C\", \"Hum\": \"15.20\", \"Time\": \"04-Nov-2020 23:52:57\" } Addtionally, the device also sends the above data every 5 minutes on the get/sensor_data topic which is a good example of receiving telemetry data periodically from the devices and using it for decision-making and presenting on IoT dashboards.","title":"Topic for Sensor Data"},{"location":"esp-firmware.html#topic-for-beeper","text":"devices/esp01/set/beeper Sounds the beeper on the device when beep command is sent and replies on following topic with beep : devices/esp01/get/beeper","title":"Topic for Beeper"},{"location":"esp-firmware.html#topic-for-uptime","text":"devices/esp01/uptime The device sends uptime on this topic every five minutes on this topic. Note that this topic uses Retain feature of MQTT protocol which retains the last message on the broker. This retained message is then delivered to any new client as it is connected to the broker and subscribes to this topic.","title":"Topic for Uptime"},{"location":"esp-firmware.html#topic-for-log","text":"devices/esp01/log The device sends all events log to this topic.","title":"Topic for Log"},{"location":"esp-firmware.html#device-functions","text":"","title":"Device Functions"},{"location":"esp-firmware.html#wifi-and-mqtt-configurations-in-ap-mode-and-captive-portal","text":"The device supports persistent configuration for WiFi Access, MQTT Broker and its credentials. There are two ways to enter in the AP Mode to set these configuration: Keep the Button1 pressed at power on or reset and the device will enter the AP mode. Long-press Button1 for 8 seconds and the device will reboot and enter the AP mode on the next boot. Once on AP mode and you can find the device on your mobile WiFi discovery. The device implements the WiFi Captive Portal (Automatically redirects to the settings webpage), so as soon as you connect your PC or Smartphone to this device's WiFi Access Point, you will automatically be redirected to the WiFi and MQTT Settings page. On this page you can choose the AP with internet access which the device will use to connect to the internet, and also save your MQTT Broker, Port, Login and Password. Once you choose an AP and save your settings, the device will reboot and will use the new settings to connect to the internet and provided MQTT Broker.","title":"WiFi and MQTT Configurations in AP Mode and Captive Portal"},{"location":"esp-firmware.html#status-led-blink-behavior","text":"The Status LED shows the device state by behaving differently in different states. The following describes the details: LED Blink Behavior Device State Constant short Blinks In boot sequence Constant very short Blinks Looking for MQTT broker Three Blinks: 100ms On and 80ms Off Ping response Constant long Blinks / Heartbeat In normal state, connected to Internet","title":"Status LED Blink Behavior"},{"location":"esp-firmware.html#log-on-serial-port-and-mqtt","text":"The device sends log messages to serial port of all system and data activity, and send some of data activity to MQTT log topic defined above. Log on serial port is a great way to troubleshoot and diagnose any problems.","title":"Log on Serial Port and MQTT"},{"location":"esp-firmware.html#public-mqtt-broker-for-testing","text":"You can use any public MQTT Broker such as broker.hivemq.com at standard port 1883 for testing purposes in device settings and Desktop and Mobile MQTT client. More details can be found at https://www.hivemq.com/public-mqtt-broker/ . You can just use their web based MQTT client at http://www.hivemq.com/demos/websocket-client/ and subscribe to the MQTT topic devices/esp01/# to listen to all communications from this device. Make sure to use Websocket port 8000 when connecting to public MQTT broker using the web based client.","title":"Public MQTT Broker for Testing"},{"location":"flutter-app.html","text":"Flutter Application This section describes how to setup and brand the Flutter app source code for your own projects. Setting up the Flutter App You must have Flutter development environment already setup to be able to open and run this Flutter app. We use Visual Studio Code and Flutter Plugin for Flutter development. You can follow these guides to setup the environment using VS Code: https://flutter.dev/docs/development/tools/vs-code https://flutter.dev/docs/get-started/editor?tab=vscode Once you have the dev environment ready, you can now open the flutter app. The .ZIP package contains a folder named iot_starter_kit_app which hosts the source code for the flutter app. Extract this folder and then right-click to open this folder with VS Code. You can start the app right away by hitting the F5 key once you open the project folder in VS code, and it will ask to launch the app in an Emulator or your connected phone, if any. First build will take a bit longer as the Flutter SDK will download referenced libraries before compiling, it's a one time process. If everything goes well, and all the dev tools are properly installed, the app shall launch in the Emulator or connected phone. Renaming and Branding the App Once you have successfully run the app on the emulator or mobile phone, you would want to brand it to your own project theme and icons. We have included some of the following flutter packages in the project\u2019s .yaml file to update App\u2019s Launcher Icon and App\u2019s Launcher name, but we are mentioning here additional packages to update Android Package Name, iOS Bundle ID as well. Please follow the official documentation of the following packages to achieve these tasks: Updating Logo and Launcher Icon https://pub.dev/packages/flutter_launcher_icons Updating App Launcher Name https://pub.dev/packages/flutter_launcher_name Updating Package Name https://pub.dev/packages/rename https://pub.dev/packages/flutter_rename_app https://stackoverflow.com/questions/51534616/how-to-change-package-name-in-flutter Adding and Updating Language Definitions The app implements multiple languages and supports RTL languages. We have used a wonderful VS Code Extension flutter-internationalize Link to manage, import and export translations and generate code. Our utility class LocaleDelegate in file utils/locale_delegate.dart takes care of the translation definitions. The extension flutter-internationalize lets you visually add new language definition JSON files, which are generated in the locales/ folder and the Dart code for definitions is generated in the /lib/generated/locale_base.dart file. VS Code Extension and Source Code Please follow the steps below the setup new language, or update language labels for any specific language in the app. Setup app's locale list in the [_languages] HashMap The language setup here will automatically appear in the language drop-down on the settings screen. Install VS Code extension flutter-internationalize from https://marketplace.visualstudio.com/items?itemName=apin.flutter-internationalize to manage, import and export translations and generate code in the /lib/generated folder Setup your App widget for locale using LocaleDelegate class: Import /lib/generated/locale_base.dart file in your code file where you want to use translations Get a reference to the current language dictionary in your code using following call, usually in the build methods: Or something like this: dart final lang = Localizations.of<LocaleBase>(context, LocaleBase); Or load language directly on demand: dart final lang = LocaleBase(); lang.load('locales/en_US.json').then((v) { print(lang.HomeScreen.greeting); } Now use the translations like this: dart Text(lang.HomeScreen.greeting); // output \"Welcome!\" // the `lang.HomeScreen.user_greeting` is set as \"Welcome {}!\" Text(LocaleDelegate.render(lang.HomeScreen.user_greeting, args: [\"John\"],)); // output \"Welcome John!\" Check LocaleDelegate.render() method on templated translations Using Google Translate to Add New Languages You can export language definitions in an Excel sheet using the Internationalize extension, then upload that excel sheet to Google Docs and use Google Translate formula: =GOOGLETRANSLATE(cell with text, \"source language\", \"target language\") in a new language column in each tab to translate from exiting languages to new languages. For example, if you want to add Persian language translated fro English, you would add a new column with header as language code fa and paste the Google Translate formula like this this the column: =GOOGLETRANSLATE($I4, \"en\", \"fa\") where: $I4 is the column with English text (source) \"en\" is the source language \"fa\" is the target language Once you have translated for the new language, you can download the .xls file, and import this file using the Internationalize extension, and it will generate appropriate .json file and corresponding dart code in your project. The App UI Explained Home Screen The home screen has Graphs for Temperature and Humidity data from the sensors on the device. This Graph shows current value of as big Label in the center and a line graph of last six values in the background. The App requests the sensor data every 5 seconds from the device. There is an event List View after the Graphs, which shows all the app events, form connectivty to commands ans responses. The list view only keep last 30 events in the cache. After the List View, there are Four buttons which send commands to the device and react upon response from the device. These are: Ping Button : Sends a \"Ping\" command to the device and changes its color, and resets the color back to normal on arrival of response form the device. This is used to check if the device is connected with the internet and is able to respond to other commands, without having to turn on/off and other port, or appliance with the port. Beep Button : Sends a \"Beep\" command to the device and changes its color, and resets the color back to normal on arrival of response form the device. This is used to check if the device is connected with the internet and is able to respond to other commands with you are in the audible range with the device, without having to turn on/off and other port, or appliance with the port. Port1 Button : This button demonstrate the \"Bounce\" effect on a port, where a port on the device is in One state permanently, then upon a command from the app, it change its state to other state for a amount of time, and then \"Bounces\" back the original state. This can be used in scenarios where you have to turn an appliance on for little amount of time, for example a door lock. Port2 Button : This s simple toggle button, and be used to read and set the port state on demand. The button show what state the port currently is in and you can press the button to send a command to toggle the state of the port. This is useful to turn any connected appliance on or off, on demand. The Home screen also has a drawer menu which show device uptime in the header: Settings Screen The settings screen lets you set language, dark or light theme, MQTT credentials and if the List View on how page shall show the log entries from the device, which is sent on /log MQTT topic. About Screen This screen shows information about the application, and can be branded as per yor projects. The Readme , License and the Changelog screens are driven by Markdown file which a located in the /assets/docs folder. You can easily update the content of these files using standard Markdown Syntax without having to write Dart code. Please visit https://www.markdownguide.org/ for help on Markdown syntax and formatting. Help Screen You can use the Help screen to show general information on how to use the app. Like the Readme , License and the Changelog screens, Help screen is also driven by Markdown file help_screen.md which a located in the /assets/docs folder. You can easily update the content of these files using standard Markdown Syntax without having to write Dart code. Enabling Multiple Languages in Markdown Files To provide content on additional languages in Markdown driven screen ( Readme , License , Changelog and Help ), you can place additional files with locale name in file names in the assets/docs/ folder and the appropriate language file will be automatically picked by the app as per the current locale. For example, file help_screen-fr.md will be picked for when the French language is selected, and file help_screen-ar.md will be shown when the Arabic language is selected.","title":"Flutter App"},{"location":"flutter-app.html#flutter-application","text":"This section describes how to setup and brand the Flutter app source code for your own projects.","title":"Flutter Application"},{"location":"flutter-app.html#setting-up-the-flutter-app","text":"You must have Flutter development environment already setup to be able to open and run this Flutter app. We use Visual Studio Code and Flutter Plugin for Flutter development. You can follow these guides to setup the environment using VS Code: https://flutter.dev/docs/development/tools/vs-code https://flutter.dev/docs/get-started/editor?tab=vscode Once you have the dev environment ready, you can now open the flutter app. The .ZIP package contains a folder named iot_starter_kit_app which hosts the source code for the flutter app. Extract this folder and then right-click to open this folder with VS Code. You can start the app right away by hitting the F5 key once you open the project folder in VS code, and it will ask to launch the app in an Emulator or your connected phone, if any. First build will take a bit longer as the Flutter SDK will download referenced libraries before compiling, it's a one time process. If everything goes well, and all the dev tools are properly installed, the app shall launch in the Emulator or connected phone.","title":"Setting up the Flutter App"},{"location":"flutter-app.html#renaming-and-branding-the-app","text":"Once you have successfully run the app on the emulator or mobile phone, you would want to brand it to your own project theme and icons. We have included some of the following flutter packages in the project\u2019s .yaml file to update App\u2019s Launcher Icon and App\u2019s Launcher name, but we are mentioning here additional packages to update Android Package Name, iOS Bundle ID as well. Please follow the official documentation of the following packages to achieve these tasks:","title":"Renaming and Branding the App"},{"location":"flutter-app.html#updating-logo-and-launcher-icon","text":"https://pub.dev/packages/flutter_launcher_icons","title":"Updating Logo and Launcher Icon"},{"location":"flutter-app.html#updating-app-launcher-name","text":"https://pub.dev/packages/flutter_launcher_name","title":"Updating App Launcher Name"},{"location":"flutter-app.html#updating-package-name","text":"https://pub.dev/packages/rename https://pub.dev/packages/flutter_rename_app https://stackoverflow.com/questions/51534616/how-to-change-package-name-in-flutter","title":"Updating Package Name"},{"location":"flutter-app.html#adding-and-updating-language-definitions","text":"The app implements multiple languages and supports RTL languages. We have used a wonderful VS Code Extension flutter-internationalize Link to manage, import and export translations and generate code. Our utility class LocaleDelegate in file utils/locale_delegate.dart takes care of the translation definitions. The extension flutter-internationalize lets you visually add new language definition JSON files, which are generated in the locales/ folder and the Dart code for definitions is generated in the /lib/generated/locale_base.dart file.","title":"Adding and Updating Language Definitions"},{"location":"flutter-app.html#vs-code-extension-and-source-code","text":"Please follow the steps below the setup new language, or update language labels for any specific language in the app. Setup app's locale list in the [_languages] HashMap The language setup here will automatically appear in the language drop-down on the settings screen. Install VS Code extension flutter-internationalize from https://marketplace.visualstudio.com/items?itemName=apin.flutter-internationalize to manage, import and export translations and generate code in the /lib/generated folder Setup your App widget for locale using LocaleDelegate class: Import /lib/generated/locale_base.dart file in your code file where you want to use translations Get a reference to the current language dictionary in your code using following call, usually in the build methods: Or something like this: dart final lang = Localizations.of<LocaleBase>(context, LocaleBase); Or load language directly on demand: dart final lang = LocaleBase(); lang.load('locales/en_US.json').then((v) { print(lang.HomeScreen.greeting); } Now use the translations like this: dart Text(lang.HomeScreen.greeting); // output \"Welcome!\" // the `lang.HomeScreen.user_greeting` is set as \"Welcome {}!\" Text(LocaleDelegate.render(lang.HomeScreen.user_greeting, args: [\"John\"],)); // output \"Welcome John!\" Check LocaleDelegate.render() method on templated translations","title":"VS Code Extension and Source Code"},{"location":"flutter-app.html#using-google-translate-to-add-new-languages","text":"You can export language definitions in an Excel sheet using the Internationalize extension, then upload that excel sheet to Google Docs and use Google Translate formula: =GOOGLETRANSLATE(cell with text, \"source language\", \"target language\") in a new language column in each tab to translate from exiting languages to new languages. For example, if you want to add Persian language translated fro English, you would add a new column with header as language code fa and paste the Google Translate formula like this this the column: =GOOGLETRANSLATE($I4, \"en\", \"fa\") where: $I4 is the column with English text (source) \"en\" is the source language \"fa\" is the target language Once you have translated for the new language, you can download the .xls file, and import this file using the Internationalize extension, and it will generate appropriate .json file and corresponding dart code in your project.","title":"Using Google Translate to Add New Languages"},{"location":"flutter-app.html#the-app-ui-explained","text":"","title":"The App UI Explained"},{"location":"flutter-app.html#home-screen","text":"The home screen has Graphs for Temperature and Humidity data from the sensors on the device. This Graph shows current value of as big Label in the center and a line graph of last six values in the background. The App requests the sensor data every 5 seconds from the device. There is an event List View after the Graphs, which shows all the app events, form connectivty to commands ans responses. The list view only keep last 30 events in the cache. After the List View, there are Four buttons which send commands to the device and react upon response from the device. These are: Ping Button : Sends a \"Ping\" command to the device and changes its color, and resets the color back to normal on arrival of response form the device. This is used to check if the device is connected with the internet and is able to respond to other commands, without having to turn on/off and other port, or appliance with the port. Beep Button : Sends a \"Beep\" command to the device and changes its color, and resets the color back to normal on arrival of response form the device. This is used to check if the device is connected with the internet and is able to respond to other commands with you are in the audible range with the device, without having to turn on/off and other port, or appliance with the port. Port1 Button : This button demonstrate the \"Bounce\" effect on a port, where a port on the device is in One state permanently, then upon a command from the app, it change its state to other state for a amount of time, and then \"Bounces\" back the original state. This can be used in scenarios where you have to turn an appliance on for little amount of time, for example a door lock. Port2 Button : This s simple toggle button, and be used to read and set the port state on demand. The button show what state the port currently is in and you can press the button to send a command to toggle the state of the port. This is useful to turn any connected appliance on or off, on demand. The Home screen also has a drawer menu which show device uptime in the header:","title":"Home Screen"},{"location":"flutter-app.html#settings-screen","text":"The settings screen lets you set language, dark or light theme, MQTT credentials and if the List View on how page shall show the log entries from the device, which is sent on /log MQTT topic.","title":"Settings Screen"},{"location":"flutter-app.html#about-screen","text":"This screen shows information about the application, and can be branded as per yor projects. The Readme , License and the Changelog screens are driven by Markdown file which a located in the /assets/docs folder. You can easily update the content of these files using standard Markdown Syntax without having to write Dart code. Please visit https://www.markdownguide.org/ for help on Markdown syntax and formatting.","title":"About Screen"},{"location":"flutter-app.html#help-screen","text":"You can use the Help screen to show general information on how to use the app. Like the Readme , License and the Changelog screens, Help screen is also driven by Markdown file help_screen.md which a located in the /assets/docs folder. You can easily update the content of these files using standard Markdown Syntax without having to write Dart code.","title":"Help Screen"},{"location":"flutter-app.html#enabling-multiple-languages-in-markdown-files","text":"To provide content on additional languages in Markdown driven screen ( Readme , License , Changelog and Help ), you can place additional files with locale name in file names in the assets/docs/ folder and the appropriate language file will be automatically picked by the app as per the current locale. For example, file help_screen-fr.md will be picked for when the French language is selected, and file help_screen-ar.md will be shown when the Arabic language is selected.","title":"Enabling Multiple Languages in Markdown Files"}]}